name: Generate Repository Map

on:
  schedule:
    - cron: '0 0 * * 0'  # (M, H, D, M, WeekDay) Weekly
  workflow_dispatch:  # Manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch Repositories and Generate Mermaid Repo Map
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub Token for API authentication
        run: |
          # Fetch repositories using the GitHub API
          curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/users/Coder-Harshit/repos > repos.json

          # Initialize the Mermaid graph
          echo '```mermaid' > repo_map.md
          echo 'graph TD;' >> repo_map.md
          
          # Group repositories by language
          python_repos=""
          rust_repos=""
          other_repos=""

          # Loop through repositories and categorize them by language
          for repo in $(cat repos.json | jq -r '.[] | @base64'); do
            _jq() {
              echo ${repo} | base64 --decode | jq -r ${1}
            }
            
            repo_name=$(_jq '.name')
            language=$(_jq '.language')

            if [[ "$language" == "Python" ]]; then
              python_repos="$python_repos $repo_name"
            elif [[ "$language" == "JavaScript" ]]; then
              js_repos="$js_repos $repo_name"
            else
              other_repos="$other_repos $repo_name"
            fi
          done

          # Create graph connections by language
          if [[ ! -z "$python_repos" ]]; then
            echo '  subgraph Python;' >> repo_map.md
            for repo in $python_repos; do
              echo "    $repo;" >> repo_map.md
            done
            echo '  end;' >> repo_map.md
          fi

          if [[ ! -z "$rust_repos" ]]; then
            echo '  subgraph Rust;' >> repo_map.md
            for repo in $rust_repos; do
              echo "    $repo;" >> repo_map.md
            done
            echo '  end;' >> repo_map.md
          fi

          if [[ ! -z "$other_repos" ]]; then
            echo '  subgraph Other;' >> repo_map.md
            for repo in $other_repos; do
              echo "    $repo;" >> repo_map.md
            done
            echo '  end;' >> repo_map.md
          fi

          # Close the Mermaid graph
          echo '```' >> repo_map.md

      - name: Update README with Repository Map
        run: |
          # Escape special characters in the repo_map.md content to be used in sed
          repo_map_content=$(<repo_map.md sed 's/[&/\]/\\&/g')

          # Create a temporary file to hold the new content
          echo "<!-- REPO_MAP_START -->" > temp_repo_map.md
          echo "$repo_map_content" >> temp_repo_map.md
          echo "<!-- REPO_MAP_END -->" >> temp_repo_map.md

          # Use sed to replace the content between <!-- REPO_MAP_START --> and <!-- REPO_MAP_END -->
          sed -i.bak -e '/<!-- REPO_MAP_START -->/,/<!-- REPO_MAP_END -->/d' README.md
          cat temp_repo_map.md >> README.md
          rm temp_repo_map.md  # Clean up the temporary file

          
      - name: Commit changes to README
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add README.md
          git commit -m "Update dynamic repository map in README"
          git push
